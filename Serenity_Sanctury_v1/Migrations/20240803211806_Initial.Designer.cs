// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Serenity_Sanctury_v1.Models.DataLayer;

#nullable disable

namespace Serenity_Sanctury_v1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240803211806_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            Address = "221 Ring Road, Callaghan, NSW, 2308, Australia",
                            CustomerID = "1",
                            OrderDate = new DateTime(2024, 8, 4, 5, 18, 5, 267, DateTimeKind.Local).AddTicks(6175),
                            OrderStatus = 0,
                            TotalPrice = 35.98m
                        });
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.OrderTracking", b =>
                {
                    b.Property<int>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingID"));

                    b.Property<string>("OrderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StatusUpdate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TrackingID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderTrackings");

                    b.HasData(
                        new
                        {
                            TrackingID = 1,
                            OrderEmail = "customer@example.com",
                            OrderID = 1,
                            PostalCode = "2308",
                            StatusUpdate = "Order placed",
                            UpdateTime = new DateTime(2024, 8, 3, 21, 18, 5, 267, DateTimeKind.Utc).AddTicks(6256)
                        });
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<string>("BurnTime")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Scent")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            BurnTime = "48 hours",
                            Category = 0,
                            Container = "Black color Glass Jar",
                            Description = "A soothing candle for relaxation.",
                            ImageUrl = "~/Image/product2.jpeg",
                            Price = 10.00m,
                            ProductName = "Honeyed Harmony",
                            Quantity = 100,
                            Scent = "Honey and Vanilla",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 2,
                            BurnTime = "40 hours",
                            Category = 0,
                            Container = "Transparent Glass Jar",
                            Description = "A tranquil candle with a refreshing floral scent, perfect for creating a peaceful atmosphere.",
                            ImageUrl = "~/Image/product3.jpeg",
                            Price = 12.99m,
                            ProductName = "Serenity Blossom",
                            Quantity = 150,
                            Scent = "Cherry Blossom",
                            Size = "10 oz"
                        },
                        new
                        {
                            ProductID = 3,
                            Category = 1,
                            Container = "Black Glass Bottle",
                            Description = "Premium sandalwood essential oil for a calming and aromatic experience.",
                            ImageUrl = "~/Image/product4.jpeg",
                            Price = 9.99m,
                            ProductName = "Soothing Sandalwood Essence",
                            Quantity = 120,
                            Scent = "Sandalwood",
                            Size = "30 ml"
                        },
                        new
                        {
                            ProductID = 4,
                            Category = 1,
                            Container = "Black Glass Bottle",
                            Description = "Pure tea tree essential oil known for its refreshing and invigorating properties.",
                            ImageUrl = "~/Image/product4.jpeg",
                            Price = 9.99m,
                            ProductName = "Invigorating Tea Tree",
                            Quantity = 150,
                            Scent = "Tea Tree",
                            Size = "30 ml"
                        },
                        new
                        {
                            ProductID = 5,
                            BurnTime = "50 hours",
                            Category = 0,
                            Container = "Black Glass Jar",
                            Description = "A soothing candle that brings a sense of calm and tranquility, perfect for your twilight hours.",
                            ImageUrl = "~/Image/product2.jpeg",
                            Price = 10.99m,
                            ProductName = "Tranquil Twilight",
                            Quantity = 100,
                            Scent = "Lavender and Chamomile",
                            Size = "12 oz"
                        },
                        new
                        {
                            ProductID = 6,
                            BurnTime = "40 hours",
                            Category = 0,
                            Container = "Transparent Glass Jar",
                            Description = "A calming candle infused with the soothing scent of lavender, perfect for creating a relaxing ambiance.",
                            ImageUrl = "~/Image/product3.jpeg",
                            Price = 12.99m,
                            ProductName = "Lavender Dreams",
                            Quantity = 75,
                            Scent = "Lavender",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 7,
                            BurnTime = "45 hours",
                            Category = 0,
                            Container = "Transparent Glass Jar",
                            Description = "A luxurious candle with the delicate and romantic scent of rose petals, ideal for creating a serene atmosphere.",
                            ImageUrl = "~/Image/product3.jpeg",
                            Price = 12.99m,
                            ProductName = "Rose Petal Oasis",
                            Quantity = 80,
                            Scent = "Rose Petals",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 8,
                            BurnTime = "40 hours",
                            Category = 0,
                            Container = "Black Glass Jar",
                            Description = "A vibrant candle with an invigorating citrus scent that brightens up any room and lifts your spirits.",
                            ImageUrl = "~/Image/product2.jpeg",
                            Price = 10.99m,
                            ProductName = "Citrus Sunrise",
                            Quantity = 90,
                            Scent = "Citrus Blend",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 9,
                            Category = 1,
                            Container = "Black Glass Bottle",
                            Description = "A refreshing essential oil with a zesty lemongrass scent, perfect for revitalizing your senses and uplifting your mood.",
                            ImageUrl = "~/Image/product4.jpeg",
                            Price = 12.99m,
                            ProductName = "Lemongrass Harmony",
                            Quantity = 100,
                            Scent = "Lemongrass",
                            Size = "30 ml"
                        },
                        new
                        {
                            ProductID = 10,
                            BurnTime = "40 hours",
                            Category = 0,
                            Container = "Black Glass Jar",
                            Description = "A delightful candle that combines the sweet and tangy aromas of mixed berries, creating a blissful and uplifting atmosphere.",
                            ImageUrl = "~/Image/product2.jpeg",
                            Price = 12.99m,
                            ProductName = "Berry Bliss",
                            Quantity = 120,
                            Scent = "Berry Blend",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 11,
                            BurnTime = "45 hours",
                            Category = 0,
                            Container = "Transparent Glass Jar",
                            Description = "A luxurious candle that envelops you in the rich and creamy aroma of vanilla, creating a cozy and relaxing ambiance.",
                            ImageUrl = "~/Image/product3.jpeg",
                            Price = 10.99m,
                            ProductName = "Vanilla Velvet",
                            Quantity = 150,
                            Scent = "Vanilla",
                            Size = "8 oz"
                        },
                        new
                        {
                            ProductID = 12,
                            Category = 2,
                            Container = "Classic Ceramic",
                            Description = "Enhance your home with the Classic Design Aroma Diffuser.This stylish diffuser adds a calming touch to any room with soothing essential oil scents and a gentle mist.Ideal for creating a relaxing atmosphere and  a touch of elegance.",
                            DiscountedPrice = 49.99m,
                            ImageUrl = "~/Image/product5.jpeg",
                            Price = 79.99m,
                            ProductName = "Classic Design Aroma Diffuser",
                            Quantity = 50
                        });
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Serenity_Sanctury_v1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Serenity_Sanctury_v1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Serenity_Sanctury_v1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Serenity_Sanctury_v1.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.Order", b =>
                {
                    b.HasOne("Serenity_Sanctury_v1.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Serenity_Sanctury_v1.Models.OrderTracking", b =>
                {
                    b.HasOne("Serenity_Sanctury_v1.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
